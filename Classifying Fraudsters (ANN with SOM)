"""
Creation Date: 10-12-2017
Created By: Alok Kumar
Dataset: Credit Approval Dataset
Data Source: http://archive.ics.uci.edu/ml/datasets/credit+approval
Dataset Description: Concerns credit card applications. with meaningless symbols for all attribute names and values to protect confidentiality of data. 
Dataset File Count: 1
Dataset Files: Credit_Card_Applications.csv (Multivariate with 15 attributes for 690 instances)
Modelling Method: Deep Hybrid Model [Self Organizing Map (SOM) with Artificial Neural Network (ANN)]
Modelling Agenda: To predict if a Credit card applicant is a potential fraudster or not.
Dependancies: Python, Numpy, Pandas, Matplotlib, PyLab, Keras & MiniSOM.
"""

# PART 1: Creating SOM (Self Organizing Map):

# Importing libraries: 
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from pylab import bone, pcolor, colorbar, plot, show
from keras.models import Sequential
from keras.layers import Dense

# Importing dataset:
dataset = pd.read_csv('Credit_Card_Applications.csv')
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values

# Feature Scaling:
from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler(feature_range = (0, 1))
X = sc.fit_transform(X)

# Training our SOM: 
from minisom import MiniSom
som = MiniSom(x = 10, y = 10, input_len = 15, sigma = 1.0, learning_rate = 0.5)
som.random_weights_init(X)
som.train_random(data = X, num_iteration = 100)

# Visualizing results: 
bone()
pcolor(som.distance_map().T)
colorbar()
markers = ['o', 's']
colors = ['r', 'g']
for i, x in enumerate(X):
    w = som.winner(x)
    plot(w[0] + 0.5,
         w[1] + 0.5,
         markers[y[i]],
         markeredgecolor = colors[y[i]],
         markerfacecolor = 'None',
         markersize = 10,
         markeredgewidth = 2)
show()

# Finding fraudsters: 
mappings = som.win_map(X)
frauds = np.concatenate((mappings[(8,1)], mappings[(6,8)]), axis = 0)
frauds = sc.inverse_transform(frauds)


# PART 2: Creating Deep Hybrid Model by introducing ANN:

# Creating matrix of features: 
customers = dataset.iloc[:, 1:].values

# Creating our dependent variable: 
is_fraud = np.zeros(len(dataset))
for i in range(len(dataset)):
    if dataset.iloc[i,0] in frauds:
        is_fraud[i] = 1

# Feature Scaling:
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
customers = sc.fit_transform(customers)

# Initialising ANN:
classifier = Sequential()

# Adding Input layer with first Hidden layer:
classifier.add(Dense(units = 2, kernel_initializer = 'uniform', activation = 'relu', input_dim = 15))

# Adding Output layer:
classifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))

# Compiling ANN:
classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

# Fitting ANN to Training set: 
classifier.fit(customers, is_fraud, batch_size = 1, epochs = 2)

# Predicting the probability of frauds:
y_pred = classifier.predict(customers)
y_pred = np.concatenate((dataset.iloc[:, 0:1].values, y_pred), axis = 1)
y_pred = y_pred[y_pred[:, 1].argsort()]
